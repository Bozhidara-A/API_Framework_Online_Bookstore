{"uid":"dc61226c84f531fe","name":"Update an author with not existing book ID","fullName":"src/test/resources/features/Authors.feature:128","historyId":"75a8befaca43685a77c4e001b1291459","time":{"start":1755126207590,"stop":1755126208914,"duration":1324},"status":"failed","statusMessage":"Status code value mismatch. | Expected: 400 | Actual: 200 expected:<400> but was:<200>","statusTrace":"java.lang.AssertionError: Status code value mismatch. | Expected: 400 | Actual: 200 expected:<400> but was:<200>\n\tat org.junit.Assert.fail(Assert.java:89)\n\tat org.junit.Assert.failNotEquals(Assert.java:835)\n\tat org.junit.Assert.assertEquals(Assert.java:647)\n\tat stepDefinitions.CommonApiSteps.verifyResponseStatusCode(CommonApiSteps.java:31)\n\tat ✽.the response status code should be 400(file:///app/src/test/resources/features/Authors.feature:125)\n","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"Status code value mismatch. | Expected: 400 | Actual: 200 expected:<400> but was:<200>","statusTrace":"java.lang.AssertionError: Status code value mismatch. | Expected: 400 | Actual: 200 expected:<400> but was:<200>\n\tat org.junit.Assert.fail(Assert.java:89)\n\tat org.junit.Assert.failNotEquals(Assert.java:835)\n\tat org.junit.Assert.assertEquals(Assert.java:647)\n\tat stepDefinitions.CommonApiSteps.verifyResponseStatusCode(CommonApiSteps.java:31)\n\tat ✽.the response status code should be 400(file:///app/src/test/resources/features/Authors.feature:125)\n","steps":[{"name":"Given  an author with ID 10 exists","time":{"start":1755126207590,"stop":1755126207850,"duration":260},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And  an author with ID 12 does not exist","time":{"start":1755126207850,"stop":1755126208369,"duration":519},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"And  a book with ID 900 does not exist","time":{"start":1755126208369,"stop":1755126208642,"duration":273},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"When  I update the author with ID: 10, with New ID: 12, Book ID: 900, First Name: \"John\", Last Name: \"Doe\"","time":{"start":1755126208642,"stop":1755126208912,"duration":270},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Then  the response status code should be 400","time":{"start":1755126208912,"stop":1755126208913,"duration":1},"status":"failed","statusMessage":"Status code value mismatch. | Expected: 400 | Actual: 200 expected:<400> but was:<200>","statusTrace":"java.lang.AssertionError: Status code value mismatch. | Expected: 400 | Actual: 200 expected:<400> but was:<200>\n\tat org.junit.Assert.fail(Assert.java:89)\n\tat org.junit.Assert.failNotEquals(Assert.java:835)\n\tat org.junit.Assert.assertEquals(Assert.java:647)\n\tat stepDefinitions.CommonApiSteps.verifyResponseStatusCode(CommonApiSteps.java:31)\n\tat ✽.the response status code should be 400(file:///app/src/test/resources/features/Authors.feature:125)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":5,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"5d2fae3eecd1"},{"name":"thread","value":"69@5d2fae3eecd1.main(1)"},{"name":"feature","value":"Authors"},{"name":"story","value":"Update an author with not existing book ID"},{"name":"suite","value":"Authors"},{"name":"testClass","value":"Update an author with not existing book ID"},{"name":"framework","value":"cucumber4jvm"},{"name":"language","value":"java"},{"name":"gherkin_uri","value":"file:///app/src/test/resources/features/Authors.feature"},{"name":"package","value":"src.test.resources.features.Authors_feature.Authors"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"book_id","value":"900"},{"name":"first_name","value":"John"},{"name":"id","value":"10"},{"name":"last_name","value":"Doe"},{"name":"new_id","value":"12"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"dc61226c84f531fe.json","parameterValues":["900","John","10","Doe","12"]}